/***********************************/
	SD Image - Loading Onto Pi
/***********************************/

// Installs
1. Raspbian --> https://www.raspberrypi.org/downloads/raspbian/
2. Minibian --> https://minibianpi.wordpress.com/

// Copy To SD
1. On Mac / Linux Machine:
> https://www.raspberrypi.org/documentation/installation/installing-images/mac.md
$ sudo dd bs=1m if=/Users/james/Applications/MiniBian-Jessie.img of=/dev/rdisk1

// Resize on PI
1. Must Resize on Raspberry Pi
> http://raspberrypi.stackexchange.com/a/501
$ sudo fdisk /dev/mmcblk0
	> p (list partitions)
	> d (delete linux partition and swap)
	> 2 (delete linux partition)
	> n (create new partition)
	> p (make primary)
	> 2 (slect the partition we deleted before)
	> w (will save)
$ reboot
$ resize2fs /dev/mmcblk0p2
$ reboot
$ df -h

/***************************/
	Intial Setup
/***************************/
// Change Password
$ passwd

// Install Basics
$ apt-get update
$ apt-get install sudo
$ apt-get install nano
$ apt-get install build-essential
$ apt-get install git

// Change Device Name
$ nano /etc/hostname
$ nano /etc/hosts

/***************************/
	Check Version of Pi
/***************************/
http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/
$ cat /proc/cpuinfo
> Revision

/***************************/
	Device Power
/***************************/
// Reboot
$ reboot

// Shutdown
$ shutdown -h now

/******************************/
	Status (Activity Monitor)
/******************************/
// IP Adresses
// Local (LAN)
$ ifconfig
// Wifi
$ iwconfig

// Check Space
$ df -h

// Check Usage
$ du / | sort -nr

// Check CPU
$ top
$ ps -ef

// Check WiFi
$ wicd-curses

// Check Connection to Apache Server
$ tail -f /var/log/apache2/access.log

/***************************/
	Camera Setup
/***************************/
// Install Camera
$ apt-get install motion
$ nano /etc/motion/motion.conf
	> stream_localhost off
$ nano /etc/default/motion
	> start_motion_daemon = yes

// Control Camera (Use Below motion command)
$ service motion start
$ service motion stop
$ service motion restart

// Start Camera
$ motion

// Restart
$ service motion stop
$ motion

// Stored Files
$ cd /var/lib/motion

// Change Framerate
$ nano /etc/motion/motion.conf
> framerate
> stream_maxrate

/*
 * Another Camera - DONT USE THREADS
 */
mkdir /home/root/motion/camera1
mkdir /home/root/motion/camera2
mkdir /home/root/motion/camera3

> Copy ~/Home-Automation/setup/motion/thread1.conf to /etc/motion/
> Copy ~/Home-Automation/setup/motion/thread2.conf to /etc/motion/
> Copy ~/Home-Automation/setup/motion/thread3.conf to /etc/motion/

> mods to /etc/motion/motion.conf

	> uncomment "thread /etc/motion/thread1.conf"
	> uncomment "thread /etc/motion/thread2.conf"

	> comment out "target_dir /var/lib/motion"
	> comment out "videodevice /dev/video0"
	> comment out "stream_port 8081"

/*
 * More than Two Cameras Persistent Setup
 */
> We need a UDEV rule
> https://wiki.debian.org/udev
> https://wiki.archlinux.org/index.php/Udev#Writing_udev_rules

> 1. Find serials of cameras that are same ID's
$ udevadm info --name=/dev/video0 --attribute-walk
> Ctr-F 'serial'

> 2. Find ID's of cameras that are unique
$ sudo apt-get install usbutils
$ lsusb
> Note ID's
	> ID 046d:0817
	> ID 1415:2000

$ cd /etc/udev/rules.d/
$ sudo nano webcam.rules
>
ATTRS{serial}=="589DE590", SYMLINK+="camera-logitech-1"
ATTRS{serial}=="B93A8590", SYMLINK+="camera-logitech-2"
ATTRS{idVendor}=="1415", ATTRS{idProduct}=="2000", SYMLINK+="camera-ps3-3"
$ reboot

/***************************/
	WiFi Setup
/***************************/
https://wiki.debian.org/WiFi/
https://wiki.debian.org/WiFi/HowToUse

// Setup WiFi Dongle - Belkin N300
$ apt-get install firmware-realtek

// Setup WiFi Dongle - Netgear N150
$ apt-get install firmware-atheros
$ apt-get install wireless-tools
$ iwconfig
$ ip link set wlan0 up
$ iwlist scan

// Joining 1
apt-get install wicd-curses
sudo wicd-curses
> press right arrow key on selected network to configure
> Automatically connect to network

// Joining 2
$ chmod 0600 /etc/network/interfaces
$ apt-get install wpasupplicant
$ wpa_passphrase KebabStand-WiFi-2G 4FDB17CB49
$ nano /etc/network/interfaces
> auto wlan0
> iface wlan0 inet dhcp
>         wpa-ssid KebabStand-WiFi-2G
>         wpa-psk 47183ef70edaff1f281a94f6e97bea25217839b2b14e453871c71d7856177158
$ ifup wlan0

// RF Kill Fix
$ apt-get install rfkill
$ rfkill list all
$ rfkill unblock all


/***************************/
	NO-IP Dynamic DNS Setup
/***************************/
// Login Remote and Setup IP

// Client Side Setup
http://www.noip.com/support/knowledgebase/installing-the-linux-dynamic-update-client/

$ cd /home/install/noip/
$ wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
$ tar xzf noip-duc-linux.tar.gz
$ cd no-ip-2.1.9

// Don't worry about errors
$ make
$ make install

// Configure
$ /usr/local/bin/noip2 -C

// Start
$ /usr/local/bin/noip2

// Start at Startup
$ nano /etc/rc.local
	// Add this line RIGHT BEFORE 'exit 0'
	> /usr/local/bin/noip2

// Update Interval
$ noip2 -U 1

/***************************/
	LAMP Stack Setup
/***************************/
$ apt-get update
$ apt-get install apache2
$ apt-get install mysql-server
$ apt-get install php5 php-pear php5-mysql
$ service apache2 restart

/***************************/
	GPIO Setup
/***************************/
$ apt-get install python
$ apt-get -y install python-rpi.gpio

// Tutes
http://www.instructables.com/id/Easiest-Raspberry-Pi-GPIO-LED-Project-Ever/?ALLSTEPS
https://www.raspberrypi.org/documentation/usage/gpio/

/***************************/
	GPIO Pin Location
/***************************/
// Finding which way round
1. 'P1' Will be somewhere next to the pins
	this will show you which way round to read the pins
2. See /images/pins.png to see locations
// http://www.raspberrypi-spy.co.uk/2012/06/simple-guide-to-the-rpi-gpio-header-and-pins/

/***************************/
	GitHub Config
/***************************/
// Follow this guide
https://help.github.com/articles/generating-ssh-keys/#platform-linux

// Instead of this
> $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Do 
> $ ssh-keygen
